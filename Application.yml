AWSTemplateFormatVersion: "2010-09-09"
Description:
  for RaiseTech lesson 
Parameters:
  LatestAmiId:
      Type:  'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
      Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
  InstanceType:
    Description: EC2 Instance Type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.small
      - t2.micro
    ConstraintDescription: must be a valid EC2 Instance Type
  KeyName:
    Description: existing EC2 keyPair
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x. 
  HTTPLocation:
    Description: The IP address range that can be used to HTTP to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x. 
  PUMALocation:
    Description: The IP address range that can be used to PUMA to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x. 
  DBName:
    Default: MyDatabase
    Description: The database name
    Type: String
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters
  DBUserName:
    NoEcho: 'true'
    Description: The database admin account username
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters
  DBPassword:
    NoEcho: 'true'
    Description: The database admin account password
    Type: String
    MinLength: '8'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must contain only alphanumeric characters
  DBAllocatedStorage:
    Default: '5'
    Description: The size of the database (Gb)
    Type: Number
    MinValue: '5'
    MaxValue: '1024'
    ConstraintDescription: must be between 5 and 1024Gb.
  DBInstanceClass:
    Description: The database instance type
    Type: String
    Default: db.t2.micro
    AllowedValues: [db.t2.small,db.t2.micro]
    ConstraintDescription: must select valid instance type

Resources:
  #VPC Section
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: '10.0.0.0/16'
      EnableDnsHostnames: 'true'
      EnableDnsSupport: 'true'
      InstanceTenancy: 'default'
      Tags:
        - Key: 'Name'
          Value: 'RaiseTechVPC' 

  MyInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: 'Name'
          Value: 'RaiseTechIG'
  
  InternetGatewayAttachment: 
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref MyInternetGateway
      VpcId:  !Ref 'MyVPC'
  
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: 'ap-northeast-1a'
      CidrBlock:  '10.0.1.0/24'
      VpcId: !Ref 'MyVPC'
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: 'Name'
          Value: 'RaiseTech-publicSub-a'

  PublicSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: 'ap-northeast-1c'
      CidrBlock:  '10.0.2.0/24'
      MapPublicIpOnLaunch: 'true'
      VpcId: !Ref 'MyVPC'
      Tags:
        - Key: 'Name'
          Value: 'RaiseTech-publicSub-c'

  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: 'ap-northeast-1a'
      CidrBlock:  '10.0.3.0/24'
      VpcId: !Ref 'MyVPC'
      Tags:
        - Key: 'Name'
          Value: 'RaiseTech-PrivateSub-a'
  
  PrivateSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: 'ap-northeast-1c'
      CidrBlock:  '10.0.4.0/24'
      VpcId: !Ref 'MyVPC'
      Tags:
        - Key: 'Name'
          Value: 'RaiseTech-PrivateSub-c'
  
  PublicRouteTableA: 
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref MyVPC 
      Tags: 
        - Key: Name
          Value: 'public-route-a'
  
  PublicRouteTableC: 
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref MyVPC 
      Tags: 
        - Key: Name
          Value: 'public-route-c'
  
  PrivateRouteTableA: 
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref MyVPC 
      Tags: 
        - Key: Name
          Value: 'privarte-route-a'
  
  PrivateRouteTableC: 
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref MyVPC 
      Tags: 
        - Key: Name
          Value: 'privarte-route-c'
  
  PublicRouteA: 
    Type: AWS::EC2::Route
    Properties: 
      RouteTableId: !Ref PublicRouteTableA 
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref MyInternetGateway
  
  PublicRouteC: 
    Type: AWS::EC2::Route
    Properties: 
      RouteTableId: !Ref PublicRouteTableC 
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref MyInternetGateway
  
  PublicSubnetARouteTableAssociation: 
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      SubnetId: !Ref PublicSubnetA 
      RouteTableId: !Ref PublicRouteTableA
  
  PublicSubnetCRouteTableAssociation: 
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      SubnetId: !Ref PublicSubnetC 
      RouteTableId: !Ref PublicRouteTableC
  
  PrivateSubnetARouteTableAssociation: 
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateRouteTableA 
  
  PrivateSubnetCRouteTableAssociation: 
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      SubnetId: !Ref PrivateSubnetC
      RouteTableId: !Ref PrivateRouteTableC

#ALB Section
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref MyVPC
      HealthCheckIntervalSeconds: '45'
      HealthCheckPath: "/"
      HealthCheckPort: "traffic-port"
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: '10'
      HealthyThresholdCount: '3'
      UnhealthyThresholdCount: '3'
      HealthCheckIntervalSeconds: '30'
      Matcher:
        HttpCode: 200
      Protocol: HTTP
      Port: 80
      Targets:
        - Id: !Ref MyInstance1
          Port: 80
  MyALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - !Ref PublicSubnetA
        - !Ref PublicSubnetC
      SecurityGroups:
        - !Ref InstanceSecurityGroup
      Scheme: "internet-facing"
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref MyALB
      Port: '80'
      Protocol: HTTP
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: !Ref MyVPC
      Targets:
        - Id: !Ref MyInstance1
          Port: 80

  #SG Section
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH HTTP PUMA access 
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHLocation
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref HTTPLocation
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: !Ref PUMALocation
      VpcId: !Ref MyVPC

  DBEC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Open database for access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '3306'
          ToPort: '3306'
          SourceSecurityGroupId: !Ref 'InstanceSecurityGroup'
      VpcId: !Ref MyVPC
  
  DBSecurityGroup:
    Type: AWS::RDS::DBSecurityGroup
    Properties:
      EC2VpcId: !Ref MyVPC
      DBSecurityGroupIngress:
        EC2SecurityGroupId: !Ref 'InstanceSecurityGroup'
      GroupDescription: database access

  #IAM Instance profile
  S3AccessRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
  S3AccessPolicies:
    Type: AWS::IAM::Policy
    Properties: 
      PolicyName: S3Access
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Action: "*"
            Resource: arn:aws:s3:::*
      Roles:
        -
          !Ref "S3AccessRole"
  S3AccessInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: '/'
      Roles:
       - !Ref S3AccessRole

  #EIP Section
  EIPToEC2ForLive:
    Type: AWS::EC2::EIPAssociation
    Properties:
      EIP: !ImportValue OutputEIP
      InstanceId: !Ref MyInstance1
      
  #EC2 Section
  MyInstance1:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref 'LatestAmiId'
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - !Ref InstanceSecurityGroup
      IamInstanceProfile:
        !Ref S3AccessInstanceProfile
      SubnetId: !Ref PublicSubnetA
     
  #S3 Section
  MyS3:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: "formyrailsbucket"
  
  #RDS Section
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: My subnet group
      SubnetIds:
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetC
  MyDB:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: !Ref 'DBName'
      AllocatedStorage: !Ref 'DBAllocatedStorage'
      DBInstanceClass: !Ref 'DBInstanceClass'
      Engine: MySQL
      EngineVersion: '5.7.31'
      MasterUsername: !Ref 'DBUserName'
      MasterUserPassword: !Ref 'DBPassword'
      DBSubnetGroupName: !Ref DBSubnetGroup
      DBSecurityGroups:
        - !Ref 'DBSecurityGroup'
